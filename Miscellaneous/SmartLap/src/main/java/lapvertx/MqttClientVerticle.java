package lapvertx;

import java.util.Calendar;
import java.util.Random;

import Types.Sensores;
import io.netty.handler.codec.mqtt.MqttConnectReturnCode;
import io.netty.handler.codec.mqtt.MqttQoS;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.Promise;
import io.vertx.core.buffer.Buffer;
import io.vertx.core.json.Json;
import io.vertx.mqtt.MqttClient;
import io.vertx.mqtt.MqttClientOptions;
import io.vertx.mqtt.MqttServer;
import io.vertx.mqtt.impl.MqttClientImpl;

public class MqttClientVerticle extends AbstractVerticle {
	
	private String classInstanceId;
	
	public void Start(Promise<Void> promise) {
		MqttClientOptions mqttClientOptions = new MqttClientOptions();
		mqttClientOptions.setAutoKeepAlive(true);
		mqttClientOptions.setAutoGeneratedClientId(false);
		mqttClientOptions.setClientId(classInstanceId);
		mqttClientOptions.setConnectTimeout(10000);
		mqttClientOptions.setKeepAliveTimeSeconds(10);
		mqttClientOptions.setReconnectAttempts(10);
		mqttClientOptions.setReconnectInterval(5000);
		mqttClientOptions.setUsername("mqttbroker");
		mqttClientOptions.setPassword("mqttbrokerpass");
		
		MqttClient mqttClient = new MqttClientImpl(vertx, mqttClientOptions);
		
		mqttClient.publishHandler(messageReceivedHandler -> {
			System.out.println(messageReceivedHandler.payload().toString());
		});
		
		mqttClient.connect(1885, "localhost", handler -> {
			
			if(handler.result().code() == MqttConnectReturnCode.CONNECTION_ACCEPTED) {
				
				mqttClient.subscribe(MqttServerVerticle.TOPIC_DOMO, MqttQoS.AT_LEAST_ONCE.value(), handlerSuscribe -> {
					if(handlerSuscribe.succeeded()) {
						System.out.println(classInstanceId+"suscrito al canal"+MqttServerVerticle.TOPIC_DOMO);
						vertx.setPeriodic(8000, periodic -> {
							Random random = new Random();
							Sensores sensor = new Sensores(1, 1, 37 + random.nextInt(10), 20+ random.nextInt(7), 10+ random.nextInt(5), Calendar.getInstance().getTimeInMillis(), 2);
							mqttClient.publish(MqttServerVerticle.TOPIC_DOMO, Buffer.buffer(Json.encodePrettily(sensor)),
									MqttQoS.AT_LEAST_ONCE, false, true);
						});
					} else {
						System.out.println(classInstanceId+"NO suscribido al canal	"+MqttServerVerticle.TOPIC_DOMO);
					}
				});
				
			} else {
				System.out.println("Error: "+ handler.result().code());
			}
			
		});
	}
	
}
